/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  app: () => app4,
  default: () => LiveFormPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  inputTypes: {
    "": "text",
    "//": "date",
    "#": "number"
  }
};
var LiveFormSettingTab = class extends import_obsidian.PluginSettingTab {
  plugin;
  constructor(app5, plugin) {
    super(app5, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const { inputTypes } = this.plugin.settings;
    Object.keys(inputTypes).forEach((prefix) => {
      new import_obsidian.Setting(containerEl).setName(`Edit type for '${prefix}' prefix`).setDesc(`Edit the type for input fields with the '${prefix}' prefix`).addText(
        (text) => text.setPlaceholder("Prefix for the type (e.g. //)").setValue(prefix || "default").onChange(async (newPrefix) => {
          inputTypes[newPrefix] = inputTypes[prefix];
          delete inputTypes[prefix];
          await this.plugin.saveSettings();
        })
      ).addText(
        (text) => text.setPlaceholder("Type (e.g., text, date, number)").setValue(inputTypes[prefix]).onChange(async (value) => {
          inputTypes[prefix] = value;
          await this.plugin.saveSettings();
        })
      ).addButton((button) => {
        button.setIcon("delete").onClick(async () => {
          delete inputTypes[prefix];
          await this.plugin.saveSettings();
          this.display();
        });
      });
    });
    new import_obsidian.Setting(containerEl).setName("Add Prefix").setDesc("Click to add a new prefix to add new inputTypes").addButton(
      (button) => button.setButtonText("Add Prefix").onClick(async () => {
        inputTypes["--"] = "";
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
};

// src/FileSuggester.ts
var import_obsidian2 = require("obsidian");
var InputSuggest = class extends import_obsidian2.AbstractInputSuggest {
  query;
  constructor(app5, textInputEl, queries) {
    super(app5, textInputEl);
    this.queries = queries.map((q) => q.trim());
    textInputEl.addEventListener("change", (event) => event.stopPropagation());
  }
  renderSuggestion(file, el) {
    let { matches = [], path } = file;
    for (let vec of matches.reverse()) {
      path = path.slice(0, vec[0]) + "<b>" + path.slice(vec[0], vec[1]) + "</b>" + path.slice(vec[1]);
    }
    el.setHTML(path);
  }
  selectSuggestion(file, evt) {
    this.textInputEl.value = file.path;
    this.textInputEl.trigger("input");
    this.textInputEl.trigger("select");
    this.textInputEl.value = "";
    this.close();
  }
  async getSuggestions(input_str) {
    const lower_input_str = input_str.toLowerCase();
    let querying = this.queries.map((query) => DataviewAPI.query(query));
    let results = await Promise.all(querying);
    let fuzzy = (0, import_obsidian2.prepareFuzzySearch)(lower_input_str);
    let sorted = results.flatMap((result) => {
      return result.value.values.map((ft) => {
        let result2 = fuzzy(ft.path);
        console.log(ft.path, result2?.score ?? -Infinity);
        return { ...ft, ...result2 };
      });
    }).sort((ft) => ft?.score ?? -Infinity);
    console.log("----------");
    return sorted;
  }
};

// src/objects.ts
function objectSet(root, path, value, method = "replace") {
  let paths = path.split(/\[(\w+)\]|\.|\["(\w+)"\]/).filter(Boolean);
  let obj = root;
  while (paths.length > 1) {
    let p2 = paths.shift();
    obj[p2] = typeof obj[p2] == "object" ? obj[p2] : {};
    obj = obj[p2];
  }
  let p = paths[0];
  let oldValue = obj[p];
  switch (method) {
    case "replace":
      obj[p] = value;
      break;
    case "append":
      obj[p] = Array.isArray(obj[p]) ? [...obj[p], value] : [oldValue, value];
      break;
    case "prepend":
      obj[p] = Array.isArray(obj[p]) ? [value, ...obj[p]] : [value, oldValue];
      break;
    case "delete":
      delete obj[p];
      break;
    case "clear":
      obj[p] = Array.isArray(obj[p]) ? [] : {};
      break;
    default:
      throw new Error("Invalid method");
  }
  return root;
}

// src/internalApi.ts
var import_obsidian3 = require("obsidian");
var app2 = global.app;
function getActiveFile() {
  return app2.workspace.activeEditor?.file ?? app2.workspace.getActiveFile();
}
async function getDVInlineFields(file) {
  if (!file)
    file = getActiveFile();
  const content = await this.app.vault.cachedRead(file);
  const regex = /\[(.*)::(.*)]|\((.*)::(.*)\)|(\w+?)::(.*?)$/g;
  const properties = [];
  let match;
  while ((match = regex.exec(content)) !== null) {
    const key = match[1].trim();
    const value = match[2].trim();
    const array = value.replace(/\s*,\s*/, ",").split(",");
    properties.push({ key, content: array.length > 1 ? array : value });
  }
  return properties;
}
async function asyncEval(code, fields = {}, api = {}) {
  const AsyncFunction = Object.getPrototypeOf(async function() {
  }).constructor;
  const func = new AsyncFunction("dataFields", "api", `with(api) with(dataFields){ return ${code} }`);
  return await func.call(this, fields, api);
}
async function replaceAsync(string, regexp, replacer) {
  const replacements = await Promise.all(
    Array.from(
      string.matchAll(regexp),
      (match) => replacer(...match)
    )
  );
  let i = 0;
  return string.replace(regexp, () => replacements[i++]);
}
function parseTarget(target) {
  const catchSquareContent = /\[\[(.*)]]/;
  const targetPattern = />(?:(?:\[\[)?([\w.\s]*?)(::|:|#)(.*?)(?:]])?)?(?:\s*(append|prepend|replace))?$/;
  const fields = target.replace(catchSquareContent, "$1").match(targetPattern) ?? [];
  var [, file, targetType = "", path, method = "replace"] = fields;
  const typeMap2 = {
    ":": "yaml",
    "::": "field",
    "#": "header",
    "": "text"
  };
  targetType = typeMap2[targetType] ?? "";
  return { file, targetType, path, method };
}
function setPrototype(a, proto) {
  a.__proto__ = proto;
  return a;
}

// src/strings.ts
async function stringTemplate(template2, fields) {
  if (!String.isString(template2))
    return template2;
  return await replaceAsync(template2, /\{(?<key>[^}]+)}/g, async (_, expr) => {
    let [exec, arg] = expr.split(":");
    var replacement = await asyncEval(exec, fields, modifications).catch((e) => `<error>${String(e)}</error>`);
    return typeof replacement == "function" ? replacement(arg) : replacement;
  });
}
var modifications = {
  date: (format = "yyyy-MM-DD") => moment().format(format),
  time: (format = "HH:mm") => moment().format(format)
};

// src/api.ts
var api_exports = {};
__export(api_exports, {
  appendTemplateToActiveFile: () => appendTemplateToActiveFile,
  createNoteFromTemplate: () => createNoteFromTemplate,
  decodeAndRun: () => decodeAndRun,
  executeCode: () => executeCode,
  getFileData: () => getFileData,
  getLinkToFile: () => getLinkToFile,
  getNewFileTemplateForFolder: () => getNewFileTemplateForFolder,
  getPlugin: () => getPlugin,
  getStructure: () => getStructure,
  getTFile: () => getTFile,
  importJs: () => importJs,
  inlineField: () => inlineField,
  saveValue: () => saveValue,
  setFrontmatter: () => setFrontmatter,
  setInlineField: () => setInlineField,
  templater: () => templater
});
var import_obsidian4 = require("obsidian");
var app3 = global.app;
function getLinkToFile(file) {
  return app3.metadataCache.fileToLinktext(file, "", true);
}
async function inlineField(key, file) {
  const tFile = getTFile(file);
  const findNotation = [
    new RegExp(`\\[(${key})::(.*?)\\]`),
    new RegExp(`\\((${key})::(.*?)\\)`),
    new RegExp(`\\b(${key})::(.*?)$`, "m")
  ];
  var content = await app3.vault.read(tFile);
  for (let notation of findNotation) {
    const match = content.match(notation);
    if (match) {
      const [field, key2, value] = match;
      let textBefore = content.slice(0, match.index);
      let line = textBefore.match(/\n/g).length;
      let ch = match.index - textBefore.lastIndexOf("\n") - 1;
      return {
        field,
        key: key2,
        value,
        start: {
          line,
          offset: match.index,
          ch
        },
        end: {
          line: line + field.match(/\n/g)?.length,
          offset: match.index + field.length,
          ch: ch + field.length
          // can be worng if there \n in the match
        }
      };
    }
  }
  return null;
}
function getTFile(path) {
  if (String.isString(path))
    path = path.trim();
  if (!path || path == "activeFile")
    return getActiveFile();
  if (path instanceof import_obsidian4.TFile)
    return path;
  path = path.startsWith("[[") && path.endsWith("]]") ? path.slice(2, -2) : path;
  let tFile = app3.metadataCache.getFirstLinkpathDest(path, "");
  if (!tFile)
    throw `"${path}" file is not exist`;
  return tFile;
}
function getStructure(path) {
  let file = getTFile(path);
  return this.app.metadataCache.getFileCache(file);
}
async function importJs(path) {
  if (path.startsWith("[[") && path.endsWith("]]")) {
    path = path.slice(2, -2);
    let TFile4 = app3.metadataCache.getFirstLinkpathDest(path, "");
    if (!TFile4)
      throw `${path} file is not exist`;
    path = TFile4.path;
  }
  let fullPath = app3.vault.adapter.getResourcePath(path);
  let timestamp = new Date().getTime();
  let busterPath = fullPath.replace(/\?.*$/, `?${timestamp}`);
  return import(busterPath);
}
async function executeCode(code, vars, contextFile, priority) {
  var fields = await getFileData(contextFile, priority);
  return asyncEval(code, { ...fields, ...vars }, api_exports);
}
async function getFileData(file, priority = "field") {
  const dv = getPlugin("dataview");
  file = getTFile(file);
  if (dv) {
    return dv.api.page(file.path);
  }
  const { frontmatter = {} } = getStructure(file);
  const inlineFields = await getDVInlineFields(file);
  const fieldsObject = inlineFields.reduce((obj, line) => (obj[line.key] = line.content, obj), {});
  if (priority == "field")
    return setPrototype(fieldsObject, frontmatter);
  if (priority == "yaml")
    return setPrototype(frontmatter, fieldsObject);
  return setPrototype(fieldsObject, frontmatter);
}
async function templater(template2, filename2, port = {}) {
  const templ = getPlugin("templater-obsidian").templater;
  const targeTFile = await app3.fileManager.createNewMarkdownFile("", filename2 ?? "Untitled");
  const templateFile = getTFile(template2);
  const runningConfig = templ.create_running_config(templateFile, targeTFile, 0);
  const content = await templ.read_and_parse_template({ ...runningConfig, port });
  await app3.vault.modify(targeTFile, content);
  return targeTFile;
}
async function createNoteFromTemplate(template2, filename2 = "", folder = "", openNewNote2) {
  const templater2 = getPlugin("templater-obsidian").templater;
  const templateFile = getTFile(template2);
  return await templater2.create_new_note_from_template(templateFile, folder, filename2, openNewNote2);
}
async function appendTemplateToActiveFile(templateFile) {
  const templater2 = getPlugin("templater-obsidian").templater;
  return await templater2.append_template_to_active_file(templateFile);
}
async function getNewFileTemplateForFolder(folder) {
  const templater2 = getPlugin("templater-obsidian").templater;
  return await templater2.create_new_note_from_template(template, folder, filename, openNewNote);
}
function getPlugin(pluginId) {
  return app3.plugins.getPlugin(pluginId);
}
async function setFrontmatter(value, path, method, file) {
  file = getTFile(file);
  await app3.fileManager.processFrontMatter(file, (obj) => {
    return objectSet(obj, path, value, method);
  });
}
async function setInlineField(value, key, method = "replace", file) {
  file = getTFile(file);
  const findNotation = [
    new RegExp(`\\[(${key})::(.*?)\\]`),
    new RegExp(`\\((${key})::(.*?)\\)`),
    new RegExp(`\\b(${key})::(.*?)$`, "m")
  ];
  var isValueUpdated = false;
  await app3.vault.process(file, (content) => {
    for (let notation of findNotation) {
      const match = content.match(notation);
      if (!match)
        continue;
      const [field, key2, oldValue] = match;
      switch (method) {
        case "replace":
          break;
        case "append":
        case "prepend":
          var array = oldValue.split(",").filter(Boolean);
          if (method == "append")
            array.push(value);
          else
            array.unshift(value);
          value = array.join(",");
          break;
        case "delete":
          return content.replace(field, "");
        case "clear":
          value = "";
          break;
        default:
          throw new Error("Invalid method");
      }
      if (oldValue != value) {
        isValueUpdated = true;
        const newField = field.replace(/(?<=::).*?(?=]|\)|$)/, value);
        return content.replace(field, newField);
      }
      return content;
    }
    isValueUpdated = true;
    var { frontmatterPosition } = getStructure(file);
    var offset = frontmatterPosition?.end.offset ?? 0;
    return [
      content.slice(0, offset),
      `
[${key}::${value}]`,
      content.slice(offset)
    ].join("\n");
  });
  return isValueUpdated;
}
async function quickText(text, target) {
  const { file, path, method = "replace", targetType } = target;
  const { headings = [], sections, frontmatterPosition } = getStructure(file);
  const tFile = getTFile(file);
  var content = await app3.vault.read(tFile);
  let lines = content.split("\n");
  var pos, delCount = 0;
  if (targetType == "header") {
    const headerIndex = headings?.findIndex((item) => item.heading.replace(/^#+/, "").trim() == path.trim());
    const [start, end] = [
      headings[headerIndex]?.position.end.offset ?? frontmatterPosition?.end.offset ?? 0,
      headings[headerIndex + 1]?.position.start.offset ?? content.length
    ];
    const startHeader = headings[headerIndex]?.position.end.line ?? frontmatterPosition?.end.line ?? 0;
    const endHeader = startHeader + content.slice(start, end).trim().split("\n").length;
    if (headerIndex == -1)
      text = `## ${path}
${text}`;
    if (["prepend", "replace"].includes(method))
      pos = startHeader;
    if (method == "append")
      pos = endHeader;
    if (method == "replace")
      delCount = endHeader - startHeader;
    content = lines.toSpliced(pos + 1, delCount, text).join("\n");
  } else if (file) {
    if (method == "prepend")
      pos = frontmatterPosition.end.line;
    if (method == "append")
      pos = lines.length;
    content = lines.toSpliced(pos + 1, delCount, text).join("\n");
  } else {
    content = content.replace(path, (match) => {
      if (method == "append")
        return `${match}${text}`;
      if (method == "prepend")
        return `${text}${match}`;
      if (method == "replace")
        return text;
      return `${method} method is not legal here`;
    });
  }
  await app3.vault.modify(tFile, content);
}
async function decodeAndRun(preExpression, priority, vars = {}, file) {
  if (preExpression.trim() == "")
    return "";
  const data = { ...await getFileData(file, priority), ...vars };
  const expression = (await stringTemplate(preExpression.trim(), data)).trim();
  try {
    if (expression.startsWith("[[") && expression.endsWith("]]")) {
      global.live = api_exports;
      const ret = await importJs(expression);
      return ret.default ?? void 0;
    }
    return await executeCode(expression, vars, file);
  } catch {
    return expression;
  } finally {
    delete global.live;
  }
}
async function saveValue(text, target) {
  const { file, targetType, path, method } = target;
  switch (targetType) {
    case "field":
      return await setInlineField(text, path, method, file);
    case "yaml":
      return await setFrontmatter(text, path, method, file);
    case "text":
    case "header":
      return await quickText(text, target);
    default:
  }
}

// src/inputs.ts
var INPUT_PATTERN = new RegExp([
  /(?:`|^)/,
  /(?<type>\w+?)\|/,
  /(?<expression>.*?__+(?<placeholder>.*?)__+.*?)/,
  /(?:\|(?<options>.+?))?/,
  /(?<target>>.*?)?/,
  /(?<id>-\d+-)?/,
  /(?:$|`)/
].map((r) => r.source).join(""), "");
function replaceCode2Inputs(rootEl, ctx, settings, app5) {
  const codesEl = rootEl.findAll("code");
  for (let codeEl of codesEl) {
    const text = codeEl.innerText.trim();
    const inputNotation = text.match(INPUT_PATTERN);
    if (!inputNotation)
      continue;
    const fields = inputNotation.groups;
    fields.pattern = "`" + text + "`";
    createForm(codeEl, app5, ctx.frontmatter, fields);
  }
}
function createInputEl(fields, queries) {
  const { type, expression, id, placeholder, pattern } = fields;
  const inputEl = createEl(
    type == "textarea" ? "textarea" : "input",
    { type }
  );
  inputEl.style.setProperty("--widther", expression.match(/_/g).length);
  inputEl.id = id;
  inputEl.placeholder = placeholder || expression.replace(/^_+$/, "");
  inputEl.title = pattern;
  if (queries.length)
    new InputSuggest(app, inputEl, queries);
  return inputEl;
}
function createRadioEls(pairs) {
  const fragment = createFragment();
  for (const { text, value } of pairs) {
    let label = fragment.createEl("label");
    label.createEl("input", { type: "radio", value });
    label.createSpan({ text });
  }
  return fragment;
}
function createHelperButtons() {
  let divEl = createEl("div", { cls: "buttons" });
  let submitEl = divEl.createEl("input", { cls: "submit", value: "save", type: "submit" });
  submitEl.tabIndex = -1;
  let btnEl = divEl.createEl("button", { title: "close", cls: "close", text: "\u{1F5D1}" });
  btnEl.tabIndex = -1;
  btnEl.addEventListener("click", (e) => e.target.trigger("remove"));
  return divEl;
}
function createForm(rootEl, app5, frontmatter, fields) {
  const formEl = createEl("form", { cls: "live-form", title: "" });
  let { expression, options, target = "", pattern } = fields;
  var targetObject = parseTarget(target);
  targetObject.path ??= pattern;
  formEl.title = pattern;
  formEl.addEventListener("save", async (e) => {
    let { value } = e.target;
    if (value == "")
      return;
    e.target.value = "";
    const run = expression.replace(/__+.*?__+/, `{input}`);
    const text = await decodeAndRun(run, targetObject.targetType, { input: value });
    if (text)
      await saveValue(text, targetObject);
    setTimeout((_) => document.getElementById(fields.id)?.focus(), 10);
  });
  formEl.addEventListener(
    "remove",
    (event) => saveValue("", { path: pattern, method: "replace", targetType: "text" })
  );
  const { textsValues, queries } = parseOptions(options);
  formEl.append(createRadioEls(textsValues));
  if (queries.length || textsValues.length == 0) {
    const inputEl = createInputEl(fields, queries);
    formEl.append(inputEl);
  }
  if (targetObject.method != "replace")
    formEl.append(createHelperButtons());
  const cbTriggerSave = (e) => e.target.trigger("save");
  formEl.addEventListener("change", cbTriggerSave);
  formEl.addEventListener("select", cbTriggerSave);
  formEl.addEventListener("submit", (e) => e.preventDefault());
  formEl.addEventListener("keydown", (e) => {
    if (!(e.key == "Enter" && (e.metaKey || e.ctrlKey)))
      return;
    cbTriggerSave(e);
  });
  rootEl.replaceWith(formEl);
}
function parseOptions(options) {
  const dv = getPlugin("dataview")?.api;
  const queryPrefix = dv?.settings.inlineQueryPrefix;
  const queries = [];
  const textsValues = [];
  if (!options)
    return { textsValues, queries };
  for (let opt of options.split(",")) {
    opt = opt.trim();
    if (queryPrefix && opt.startsWith(queryPrefix)) {
      let query = opt.replace(queryPrefix, "");
      queries.push(query);
    } else {
      let [text, value = text] = opt.split(/:/);
      textsValues.push({ text, value });
    }
  }
  return { textsValues, queries };
}

// src/buttons.ts
var BUTTON_PATTERN = /(?:^|`)button\|(?<name>.+)\|\s*(?<expression>.+?)\s*(?<target>>.*?)?\s*(?<id>-\d+-)?(?:$|`)/i;
function replaceCode2Buttons(root, ctx, settings, app5) {
  const codesEl = root.findAll("code");
  for (let codeEl of codesEl) {
    const text = codeEl.innerText.trim();
    const buttonNotation = text.match(BUTTON_PATTERN);
    if (!buttonNotation)
      continue;
    const fields = buttonNotation.groups;
    fields.pattern = "`" + text + "`";
    createButton(codeEl, app5, ctx.frontmatter, fields);
  }
}
function createButton(rootEl, app5, frontmatter, fields) {
  const buttonEl = rootEl.createEl("button", { cls: "live-form" });
  const { name, expression, target = "", pattern } = fields;
  buttonEl.textContent = name;
  buttonEl.title = pattern;
  rootEl.replaceWith(buttonEl);
  buttonEl.onclick = async (event) => {
    var targetObject = parseTarget(target);
    targetObject.path ??= pattern;
    let newText = await decodeAndRun(expression, targetObject.targetType);
    if (newText)
      await saveValue(newText, targetObject);
  };
}

// src/update.ts
var UPDATE_PATTERN = /(?:^|`)update\|\s*?(?<expression>.*?)\s*?(?<target>>.*?)?(?:$|`)/i;
var delegateUpdate = update;
async function update(fileContent, file) {
  for (let match of fileContent.matchAll(new RegExp(UPDATE_PATTERN, "g"))) {
    const pattern = match[0];
    const { expression, target: targetDesc = "" } = match.groups;
    var target = parseTarget(targetDesc);
    target.path ??= pattern;
    target.file ??= file;
    let newText = await decodeAndRun(expression, target.targetType);
    if (newText) {
      await saveValue(newText, target);
    }
  }
}
async function replaceCode2Update(root, ctx, settings, app5) {
  const codesEl = root.findAll("code");
  for (let codeEl of codesEl) {
    const text = codeEl.innerText.trim();
    const buttonNotation = text.match(UPDATE_PATTERN);
    if (!buttonNotation)
      continue;
    const { expression, target } = buttonNotation.groups;
    codeEl.classList.add("live-form-update");
    codeEl.textContent = `\u{1F9EE} ${expression} ${target}`;
  }
}

// src/main.ts
var app4;
var LiveFormPlugin = class extends import_obsidian5.Plugin {
  settings = {};
  id = 1;
  async onload() {
    app4 = this.app;
    console.log("loading live-form plugin");
    this.app.workspace.on("editor-change", async (editor) => {
      let cur = editor.getCursor();
      let fileContent = editor.getValue();
    });
    this.registerMarkdownPostProcessor(
      (root, ctx) => {
        replaceCode2Inputs(root, ctx, this.settings, this.app);
        replaceCode2Buttons(root, ctx, this.settings, this.app);
        replaceCode2Update(root, ctx, this.settings, this.app);
      }
    );
    this.app.metadataCache.on("changed", async (file, content, cache) => {
      var viewMode = app4.workspace.activeEditor.getMode();
      if (viewMode == "preview")
        await delegateUpdate(content, file);
    });
    await this.loadSettings();
    this.addSettingTab(new LiveFormSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
