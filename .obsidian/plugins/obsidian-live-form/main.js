/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  CODE_ELEMENT_MARK: () => CODE_ELEMENT_MARK,
  INPUT_PATTERN: () => INPUT_PATTERN,
  app: () => app,
  default: () => LiveFormPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  inputTypes: {
    "": "text",
    "//": "date",
    "#": "number"
  }
};
var LiveFormSettingTab = class extends import_obsidian.PluginSettingTab {
  plugin;
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const { inputTypes } = this.plugin.settings;
    Object.keys(inputTypes).forEach((prefix) => {
      new import_obsidian.Setting(containerEl).setName(`Edit type for '${prefix}' prefix`).setDesc(`Edit the type for input fields with the '${prefix}' prefix`).addText(
        (text) => text.setPlaceholder("Prefix for the type (e.g. //)").setValue(prefix || "default").onChange(async (newPrefix) => {
          inputTypes[newPrefix] = inputTypes[prefix];
          delete inputTypes[prefix];
          await this.plugin.saveSettings();
        })
      ).addText(
        (text) => text.setPlaceholder("Type (e.g., text, date, number)").setValue(inputTypes[prefix]).onChange(async (value) => {
          inputTypes[prefix] = value;
          await this.plugin.saveSettings();
        })
      ).addButton((button) => {
        button.setIcon("delete").onClick(async () => {
          delete inputTypes[prefix];
          await this.plugin.saveSettings();
          this.display();
        });
      });
    });
    new import_obsidian.Setting(containerEl).setName("Add Prefix").setDesc("Click to add a new prefix to add new inputTypes").addButton(
      (button) => button.setButtonText("Add Prefix").onClick(async () => {
        inputTypes["--"] = "";
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
};

// src/util.ts
var import_obsidian3 = require("obsidian");

// src/FileSuggester.ts
var import_obsidian2 = require("obsidian");
var InputSuggest = class extends import_obsidian2.AbstractInputSuggest {
  query;
  constructor(app2, textInputEl, queries) {
    super(app2, textInputEl);
    this.queries = queries.map((q) => q.trim());
    textInputEl.addEventListener("change", (event) => event.stopPropagation());
  }
  renderSuggestion(file, el) {
    let { matches = [], path } = file;
    for (let vec of matches.reverse()) {
      path = path.slice(0, vec[0]) + "<b>" + path.slice(vec[0], vec[1]) + "</b>" + path.slice(vec[1]);
    }
    el.setHTML(path);
  }
  selectSuggestion(file, evt) {
    this.textInputEl.value = file.path;
    this.textInputEl.trigger("input");
    this.textInputEl.trigger("select");
    this.textInputEl.value = "";
    this.close();
  }
  async getSuggestions(input_str) {
    const lower_input_str = input_str.toLowerCase();
    let querying = this.queries.map((query) => DataviewAPI.query(query));
    let results = await Promise.all(querying);
    let fuzzy = (0, import_obsidian2.prepareFuzzySearch)(lower_input_str);
    let sorted = results.flatMap((result) => {
      return result.value.values.map((ft) => {
        let result2 = fuzzy(ft.path);
        console.log(ft.path, result2?.score ?? -Infinity);
        return { ...ft, ...result2 };
      });
    }).sort((ft) => ft?.score ?? -Infinity);
    console.log("----------");
    return sorted;
  }
};

// src/objects.ts
function objectSet(root, path, value, isPush) {
  let paths = path.split(/\[(\w+)\]|\.|\["(\w+)"\]/).filter(Boolean);
  let obj = root;
  while (paths.length > 1) {
    let p2 = paths.shift();
    obj[p2] = typeof obj[p2] == "object" ? obj[p2] : {};
    obj = obj[p2];
  }
  let p = paths[0];
  if (isPush) {
    obj[p] = Array.isArray(obj[p]) ? obj[p] : [];
    obj[p].push(value);
  } else {
    obj[p] = value;
  }
}
function objectGet(root, path) {
  let paths = path.split(/\[(\w+)\]|\.|\["(\w+)"\]/).filter(Boolean);
  let current = root;
  do {
    if (current == void 0)
      return void 0;
    let p = paths.shift();
    current = current[p];
  } while (paths.length);
  return current;
}

// src/strings.ts
function stringTemplate(template, modifationObject) {
  return template.replace(/\{(?<key>[^}]+)}/, (_, aaa) => {
    let [key, arg] = aaa.split(":");
    let replacement = modifationObject[key];
    let value = typeof replacement == "function" ? replacement(arg) : replacement;
    return value;
  });
}
var modifications = {
  date: (format = "yyyy-MM-DD") => moment().format(format),
  time: (format = "HH:mm") => moment().format(format)
};
var typeMap = {
  date: "\u{1F4C5}",
  number: "\u{1F522}",
  textarea: "\u{1F4AC}",
  time: "\u231A"
};

// src/util.ts
function getMaxAnotationId(fileContent) {
  let maxId = 1;
  for (let anotation of fileContent.matchAll(INPUT_PATTERN)) {
    let inputFields = anotation.groups;
    let id = inputFields.id?.match(/\d+/) ?? 0;
    maxId = Math.max(id, maxId);
  }
  return maxId;
}
function reformatAnotation(fileContent, textLine) {
  let maxId = 0;
  return textLine.replace(INPUT_PATTERN, (...match) => {
    let group = match.at(-1);
    if (group.id)
      return match[0];
    let content = match[0].slice(1, -1);
    maxId = 1 + (maxId || getMaxAnotationId(fileContent));
    return `\`${content} -${maxId}-\``;
  });
}
function replaceCode2Inputs(root, ctx, settings, app2) {
  const codesEl = root.findAll("code");
  const { workspace } = app2;
  for (let codeEl of codesEl) {
    const text = codeEl.innerText.trim();
    const inputNotation = text.match(CODE_ELEMENT_MARK);
    if (!inputNotation)
      continue;
    const inputFields = inputNotation.groups;
    inputFields.pattern = "`" + text + "`";
    const formEl = createForm(app2, ctx.frontmatter, inputFields);
    formEl.addEventListener("save", async (event) => {
      await saveValue(event, app2, inputFields);
      setTimeout((_) => {
        let { id } = inputFields;
        let element = document.getElementById(id);
        element?.focus();
      }, 10);
    });
    codeEl.replaceWith(formEl);
  }
}
function createForm(app2, frontmatter, inputFields) {
  const DataviewAPI2 = app2.plugins.plugins.dataview;
  inputFields.yaml = inputFields.yaml?.replace(/^:/, "");
  const formEl = createEl("form", { cls: "live-form", title: "" });
  let { options = "", type, continues, input, id } = inputFields;
  const inputEl = createEl(
    type == "textarea" ? "textarea" : "input",
    { type }
  );
  inputEl.style.setProperty("--widther", input.match(/_/g).length);
  inputEl.id = id;
  inputEl.placeholder = generatePlaceholder(inputFields, frontmatter);
  debugger;
  inputEl.title = generateTitle(inputFields);
  const queries = [];
  const { inlineQueryPrefix } = DataviewAPI2.settings;
  options = options.slice(1).trim();
  if (options) {
    const inputOptions = options.split(",");
    for (let opt of inputOptions) {
      opt = opt.trim();
      if (opt.startsWith(inlineQueryPrefix)) {
        let query = opt.replace(DataviewAPI2.settings.inlineQueryPrefix, "");
        queries.push(query);
      } else {
        let [text, value = text] = opt.split("=");
        let label = formEl.createEl("label");
        label.createEl("input", { type: "radio", value });
        label.createSpan({ text });
      }
    }
  }
  if (queries.length) {
    new InputSuggest(app2, inputEl, queries);
  }
  if (queries.length || !options) {
    formEl.append(inputEl);
  }
  if (continues) {
    let divEl = formEl.createEl("div", { cls: "buttons" });
    let submitEl = divEl.createEl("input", {
      cls: "submit",
      value: "save",
      type: "submit"
    });
    submitEl.tabIndex = -1;
    let btnEl = divEl.createEl("button", {
      cls: "close",
      text: "\u{1F5D1}",
      title: "close"
    });
    btnEl.tabIndex = -1;
    btnEl.addEventListener("click", (event) => remove(event, app2, inputFields));
  }
  formEl.addEventListener("change", (event) => event.target.trigger("save"));
  formEl.addEventListener("select", (event) => event.target.trigger("save"));
  formEl.addEventListener("submit", (event) => event.preventDefault());
  formEl.addEventListener("keydown", (event) => {
    if (event.key === "Enter" && (event.metaKey || event.ctrlKey)) {
      event.target.trigger("save");
    }
  });
  return formEl;
}
async function saveValue(event, app2, inputFields) {
  if (event.target.value == "")
    return;
  let { value } = event.target;
  event.target.value = "";
  const { pattern, continues, delimiter, yaml, type, pretext } = inputFields;
  let file = app2.workspace.activeEditor.file;
  if (yaml) {
    await app2.fileManager.processFrontMatter(file, (front) => {
      let key = inputFields.yaml;
      objectSet(front, key, value, !!continues);
      return front;
    });
  } else {
    await app2.vault.process(file, (data) => {
      if (pretext)
        value = stringTemplate(pretext, modifications) + value;
      if (delimiter)
        value += delimiter;
      if (type == "textarea")
        value += "\n";
      if (continues)
        value += pattern;
      return data.replace(pattern, value);
    });
  }
}
function generatePlaceholder(inputFields, frontmatterValues) {
  let { type, placeholder, yaml, continues } = inputFields;
  let yamlPlaceholder = "";
  if (inputFields.yaml) {
    let yamlValue = JSON.stringify(objectGet(frontmatterValues, inputFields.yaml));
    yamlPlaceholder = `:${yaml} (= ${yamlValue ?? "empty"})`;
  }
  let typeAndHolder = [typeMap[type], placeholder].filter(Boolean).join(" ");
  return `${typeAndHolder} ${yamlPlaceholder} ${continues ? "+" : ""}`;
}
function generateTitle(inputFields) {
  let { pattern } = inputFields;
  return pattern;
}
async function remove(event, app2, inputFields) {
  const { pattern, delimiter = "" } = inputFields;
  let file = app2.workspace.activeEditor.file;
  await app2.vault.process(file, (data) => {
    return data.replace(delimiter + pattern, "");
  });
}

// src/main.ts
var BASE_MARK = new RegExp([
  /(?<pretext>.*)\b(?<type>[^_`]*?)/,
  // input type
  /(?<input>__+(?<placeholder>[^_`]*)__+)/,
  // mandatory input pattern
  /(?<continues>(?<delimiter>.+(?=\+\+))?(\+\+))?/,
  // continue mark
  // /(?<options>,[-\w= ,#@$]+)?/,
  /(?<options>,.+?)?/,
  /(?<yaml>:[\w.]+)?/,
  /(?<id> -\d+-)?/
].map((r) => r.source).join("\\s*?"), "");
var CODE_ELEMENT_MARK = new RegExp(`${BASE_MARK.source}$`);
var INPUT_PATTERN = new RegExp(`\`${BASE_MARK.source}\``, "g");
console.log("INPUT_PATTERN", INPUT_PATTERN);
var app;
var LiveFormPlugin = class extends import_obsidian4.Plugin {
  settings = {};
  id = 1;
  async onload() {
    app = this.app;
    console.log("loading live-form plugin");
    this.app.workspace.on("editor-change", async (editor) => {
      let cur = editor.getCursor();
      let textLine = editor.getLine(cur.line);
      let fileContent = editor.getValue();
      let reformatText = reformatAnotation(fileContent, textLine);
      if (textLine === reformatText)
        return;
      editor.setLine(cur.line, reformatText);
      editor.setCursor(cur);
    });
    this.registerMarkdownPostProcessor(
      (root, ctx) => {
        return replaceCode2Inputs(root, ctx, this.settings, this.app);
      }
    );
    await this.loadSettings();
    this.addSettingTab(new LiveFormSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
